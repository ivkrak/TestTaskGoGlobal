from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import database
import keyboards
from misc import logger
import misc
from . import other
from .other import send_exchange

router = Router()


@router.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üíµ', F.chat.type == 'private')
@logger.catch
async def get_exchange(message: Message):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É–∑–Ω–∞–ª –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')
    await send_exchange(message.from_user.id)


class FsmGetExchange(StatesGroup):
    get_exchange = State()


@router.message(F.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å üíµ', F.chat.type == 'private')
@logger.catch
async def sud_to_exchange(message: Message, state: FSMContext):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')
    await message.answer(
        text='–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, —Å –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–æ–ª–ª–∞—Ä–∞',
        reply_markup=keyboards.time_buttons
    )
    await state.set_state(FsmGetExchange.get_exchange)


@router.callback_query()
@logger.catch
async def get_sub_time(q_query: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
    """
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑ –≤ {q_query.data}')
    await q_query.message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞'
    )

    await database.add_subscription(
        tg_user_id=q_query.from_user.id,
        pause_between_sending=misc.time_dict.get(q_query.data))
    await state.clear()
    await other.infinite_send_exchange(q_query.from_user.id)


@router.message(F.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üíµ', F.chat.type == 'private')
@logger.catch
async def sud_to_exchange(message: Message):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')
    await message.answer(
        text='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
    )
    await database.remove_subscription(tg_user_id=message.from_user.id)


@router.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∫—É—Ä—Å–∞ üíµ', F.chat.type == 'private')
@logger.catch
async def get_exchange_history(message: Message):
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É–∑–Ω–∞–ª –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞')
    await other.send_exchange_history(message.from_user.id)
